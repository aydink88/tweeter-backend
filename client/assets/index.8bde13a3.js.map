{"version":3,"file":"index.8bde13a3.js","sources":["../../src/components/Icon/GlobeIcon.tsx","../../src/components/Icon/PeopleIcon.tsx","../../src/services/TweetText.ts","../../src/components/tweet/ProgressRing.jsx","../../node_modules/linkifyjs/dist/linkify.es.js","../../node_modules/linkify-plugin-hashtag/dist/linkify-plugin-hashtag.es.js","../../src/components/tweet/TweetCompose.tsx","../../src/components/Home/index.tsx"],"sourcesContent":["import Icon from '.'\n\nexport default function GlobeIcon(props: any) {\n  return (\n    <Icon {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\"\n      ></path>\n    </Icon>\n  )\n}\n","import Icon from '.'\n\nexport default function PeopleIcon(props: any) {\n  return (\n    <Icon {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\"\n      ></path>\n    </Icon>\n  )\n}\n","const hashtagRegex = /(?:^|\\s)(?:#)([a-zA-Z\\d]+)/gm\nconst mentionRegex = /(?:^|\\s)(?:@)([a-zA-Z\\d]+)/gm\nconst urlRegex = /\\b(https?:\\/\\/\\S*\\b)/g\n\nexport class TweetText {\n  public hashtags: string[]\n  public mentions: string[]\n  public urls: string[]\n\n  constructor(public text: string) {\n    this.hashtags = this.getRegexMatches(hashtagRegex)\n    this.mentions = this.getRegexMatches(mentionRegex)\n    this.urls = this.getRegexMatches(urlRegex)\n  }\n\n  private getRegexMatches(regex: RegExp) {\n    const matches = []\n    let match\n\n    while ((match = regex.exec(this.text))) {\n      matches.push(match[1])\n    }\n\n    return matches\n  }\n}\n","// no typescript because style variables errors.\nexport default function ProgressRing({ letterCount = 0 }) {\n  const value = Math.floor(((280 - letterCount) * 100) / 280)\n  let textColorClassname = 'text-primary'\n  if (value <= 50) {\n    textColorClassname = 'text-warning'\n  }\n  if (value <= 20) {\n    textColorClassname = 'text-error'\n  }\n\n  return letterCount > 280 ? (\n    <span className={`mx-2 text-error`}>-{letterCount - 280}</span>\n  ) : (\n    <div\n      className={`text-xs radial-progress ${textColorClassname}`}\n      style={{ '--value': value, '--size': '2rem', '--thickness': '8%' }}\n    >\n      {280 - letterCount}\n    </div>\n  )\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nvar tlds = 'aaa \\\naarp \\\nabarth \\\nabb \\\nabbott \\\nabbvie \\\nabc \\\nable \\\nabogado \\\nabudhabi \\\nac \\\nacademy \\\naccenture \\\naccountant \\\naccountants \\\naco \\\nactor \\\nad \\\nadac \\\nads \\\nadult \\\nae \\\naeg \\\naero \\\naetna \\\naf \\\nafl \\\nafrica \\\nag \\\nagakhan \\\nagency \\\nai \\\naig \\\nairbus \\\nairforce \\\nairtel \\\nakdn \\\nal \\\nalfaromeo \\\nalibaba \\\nalipay \\\nallfinanz \\\nallstate \\\nally \\\nalsace \\\nalstom \\\nam \\\namazon \\\namericanexpress \\\namericanfamily \\\namex \\\namfam \\\namica \\\namsterdam \\\nanalytics \\\nandroid \\\nanquan \\\nanz \\\nao \\\naol \\\napartments \\\napp \\\napple \\\naq \\\naquarelle \\\nar \\\narab \\\naramco \\\narchi \\\narmy \\\narpa \\\nart \\\narte \\\nas \\\nasda \\\nasia \\\nassociates \\\nat \\\nathleta \\\nattorney \\\nau \\\nauction \\\naudi \\\naudible \\\naudio \\\nauspost \\\nauthor \\\nauto \\\nautos \\\navianca \\\naw \\\naws \\\nax \\\naxa \\\naz \\\nazure \\\nba \\\nbaby \\\nbaidu \\\nbanamex \\\nbananarepublic \\\nband \\\nbank \\\nbar \\\nbarcelona \\\nbarclaycard \\\nbarclays \\\nbarefoot \\\nbargains \\\nbaseball \\\nbasketball \\\nbauhaus \\\nbayern \\\nbb \\\nbbc \\\nbbt \\\nbbva \\\nbcg \\\nbcn \\\nbd \\\nbe \\\nbeats \\\nbeauty \\\nbeer \\\nbentley \\\nberlin \\\nbest \\\nbestbuy \\\nbet \\\nbf \\\nbg \\\nbh \\\nbharti \\\nbi \\\nbible \\\nbid \\\nbike \\\nbing \\\nbingo \\\nbio \\\nbiz \\\nbj \\\nblack \\\nblackfriday \\\nblockbuster \\\nblog \\\nbloomberg \\\nblue \\\nbm \\\nbms \\\nbmw \\\nbn \\\nbnpparibas \\\nbo \\\nboats \\\nboehringer \\\nbofa \\\nbom \\\nbond \\\nboo \\\nbook \\\nbooking \\\nbosch \\\nbostik \\\nboston \\\nbot \\\nboutique \\\nbox \\\nbr \\\nbradesco \\\nbridgestone \\\nbroadway \\\nbroker \\\nbrother \\\nbrussels \\\nbs \\\nbt \\\nbugatti \\\nbuild \\\nbuilders \\\nbusiness \\\nbuy \\\nbuzz \\\nbv \\\nbw \\\nby \\\nbz \\\nbzh \\\nca \\\ncab \\\ncafe \\\ncal \\\ncall \\\ncalvinklein \\\ncam \\\ncamera \\\ncamp \\\ncancerresearch \\\ncanon \\\ncapetown \\\ncapital \\\ncapitalone \\\ncar \\\ncaravan \\\ncards \\\ncare \\\ncareer \\\ncareers \\\ncars \\\ncasa \\\ncase \\\ncash \\\ncasino \\\ncat \\\ncatering \\\ncatholic \\\ncba \\\ncbn \\\ncbre \\\ncbs \\\ncc \\\ncd \\\ncenter \\\nceo \\\ncern \\\ncf \\\ncfa \\\ncfd \\\ncg \\\nch \\\nchanel \\\nchannel \\\ncharity \\\nchase \\\nchat \\\ncheap \\\nchintai \\\nchristmas \\\nchrome \\\nchurch \\\nci \\\ncipriani \\\ncircle \\\ncisco \\\ncitadel \\\nciti \\\ncitic \\\ncity \\\ncityeats \\\nck \\\ncl \\\nclaims \\\ncleaning \\\nclick \\\nclinic \\\nclinique \\\nclothing \\\ncloud \\\nclub \\\nclubmed \\\ncm \\\ncn \\\nco \\\ncoach \\\ncodes \\\ncoffee \\\ncollege \\\ncologne \\\ncom \\\ncomcast \\\ncommbank \\\ncommunity \\\ncompany \\\ncompare \\\ncomputer \\\ncomsec \\\ncondos \\\nconstruction \\\nconsulting \\\ncontact \\\ncontractors \\\ncooking \\\ncookingchannel \\\ncool \\\ncoop \\\ncorsica \\\ncountry \\\ncoupon \\\ncoupons \\\ncourses \\\ncpa \\\ncr \\\ncredit \\\ncreditcard \\\ncreditunion \\\ncricket \\\ncrown \\\ncrs \\\ncruise \\\ncruises \\\ncu \\\ncuisinella \\\ncv \\\ncw \\\ncx \\\ncy \\\ncymru \\\ncyou \\\ncz \\\ndabur \\\ndad \\\ndance \\\ndata \\\ndate \\\ndating \\\ndatsun \\\nday \\\ndclk \\\ndds \\\nde \\\ndeal \\\ndealer \\\ndeals \\\ndegree \\\ndelivery \\\ndell \\\ndeloitte \\\ndelta \\\ndemocrat \\\ndental \\\ndentist \\\ndesi \\\ndesign \\\ndev \\\ndhl \\\ndiamonds \\\ndiet \\\ndigital \\\ndirect \\\ndirectory \\\ndiscount \\\ndiscover \\\ndish \\\ndiy \\\ndj \\\ndk \\\ndm \\\ndnp \\\ndo \\\ndocs \\\ndoctor \\\ndog \\\ndomains \\\ndot \\\ndownload \\\ndrive \\\ndtv \\\ndubai \\\ndunlop \\\ndupont \\\ndurban \\\ndvag \\\ndvr \\\ndz \\\nearth \\\neat \\\nec \\\neco \\\nedeka \\\nedu \\\neducation \\\nee \\\neg \\\nemail \\\nemerck \\\nenergy \\\nengineer \\\nengineering \\\nenterprises \\\nepson \\\nequipment \\\ner \\\nericsson \\\nerni \\\nes \\\nesq \\\nestate \\\net \\\netisalat \\\neu \\\neurovision \\\neus \\\nevents \\\nexchange \\\nexpert \\\nexposed \\\nexpress \\\nextraspace \\\nfage \\\nfail \\\nfairwinds \\\nfaith \\\nfamily \\\nfan \\\nfans \\\nfarm \\\nfarmers \\\nfashion \\\nfast \\\nfedex \\\nfeedback \\\nferrari \\\nferrero \\\nfi \\\nfiat \\\nfidelity \\\nfido \\\nfilm \\\nfinal \\\nfinance \\\nfinancial \\\nfire \\\nfirestone \\\nfirmdale \\\nfish \\\nfishing \\\nfit \\\nfitness \\\nfj \\\nfk \\\nflickr \\\nflights \\\nflir \\\nflorist \\\nflowers \\\nfly \\\nfm \\\nfo \\\nfoo \\\nfood \\\nfoodnetwork \\\nfootball \\\nford \\\nforex \\\nforsale \\\nforum \\\nfoundation \\\nfox \\\nfr \\\nfree \\\nfresenius \\\nfrl \\\nfrogans \\\nfrontdoor \\\nfrontier \\\nftr \\\nfujitsu \\\nfun \\\nfund \\\nfurniture \\\nfutbol \\\nfyi \\\nga \\\ngal \\\ngallery \\\ngallo \\\ngallup \\\ngame \\\ngames \\\ngap \\\ngarden \\\ngay \\\ngb \\\ngbiz \\\ngd \\\ngdn \\\nge \\\ngea \\\ngent \\\ngenting \\\ngeorge \\\ngf \\\ngg \\\nggee \\\ngh \\\ngi \\\ngift \\\ngifts \\\ngives \\\ngiving \\\ngl \\\nglass \\\ngle \\\nglobal \\\nglobo \\\ngm \\\ngmail \\\ngmbh \\\ngmo \\\ngmx \\\ngn \\\ngodaddy \\\ngold \\\ngoldpoint \\\ngolf \\\ngoo \\\ngoodyear \\\ngoog \\\ngoogle \\\ngop \\\ngot \\\ngov \\\ngp \\\ngq \\\ngr \\\ngrainger \\\ngraphics \\\ngratis \\\ngreen \\\ngripe \\\ngrocery \\\ngroup \\\ngs \\\ngt \\\ngu \\\nguardian \\\ngucci \\\nguge \\\nguide \\\nguitars \\\nguru \\\ngw \\\ngy \\\nhair \\\nhamburg \\\nhangout \\\nhaus \\\nhbo \\\nhdfc \\\nhdfcbank \\\nhealth \\\nhealthcare \\\nhelp \\\nhelsinki \\\nhere \\\nhermes \\\nhgtv \\\nhiphop \\\nhisamitsu \\\nhitachi \\\nhiv \\\nhk \\\nhkt \\\nhm \\\nhn \\\nhockey \\\nholdings \\\nholiday \\\nhomedepot \\\nhomegoods \\\nhomes \\\nhomesense \\\nhonda \\\nhorse \\\nhospital \\\nhost \\\nhosting \\\nhot \\\nhoteles \\\nhotels \\\nhotmail \\\nhouse \\\nhow \\\nhr \\\nhsbc \\\nht \\\nhu \\\nhughes \\\nhyatt \\\nhyundai \\\nibm \\\nicbc \\\nice \\\nicu \\\nid \\\nie \\\nieee \\\nifm \\\nikano \\\nil \\\nim \\\nimamat \\\nimdb \\\nimmo \\\nimmobilien \\\nin \\\ninc \\\nindustries \\\ninfiniti \\\ninfo \\\ning \\\nink \\\ninstitute \\\ninsurance \\\ninsure \\\nint \\\ninternational \\\nintuit \\\ninvestments \\\nio \\\nipiranga \\\niq \\\nir \\\nirish \\\nis \\\nismaili \\\nist \\\nistanbul \\\nit \\\nitau \\\nitv \\\njaguar \\\njava \\\njcb \\\nje \\\njeep \\\njetzt \\\njewelry \\\njio \\\njll \\\njm \\\njmp \\\njnj \\\njo \\\njobs \\\njoburg \\\njot \\\njoy \\\njp \\\njpmorgan \\\njprs \\\njuegos \\\njuniper \\\nkaufen \\\nkddi \\\nke \\\nkerryhotels \\\nkerrylogistics \\\nkerryproperties \\\nkfh \\\nkg \\\nkh \\\nki \\\nkia \\\nkids \\\nkim \\\nkinder \\\nkindle \\\nkitchen \\\nkiwi \\\nkm \\\nkn \\\nkoeln \\\nkomatsu \\\nkosher \\\nkp \\\nkpmg \\\nkpn \\\nkr \\\nkrd \\\nkred \\\nkuokgroup \\\nkw \\\nky \\\nkyoto \\\nkz \\\nla \\\nlacaixa \\\nlamborghini \\\nlamer \\\nlancaster \\\nlancia \\\nland \\\nlandrover \\\nlanxess \\\nlasalle \\\nlat \\\nlatino \\\nlatrobe \\\nlaw \\\nlawyer \\\nlb \\\nlc \\\nlds \\\nlease \\\nleclerc \\\nlefrak \\\nlegal \\\nlego \\\nlexus \\\nlgbt \\\nli \\\nlidl \\\nlife \\\nlifeinsurance \\\nlifestyle \\\nlighting \\\nlike \\\nlilly \\\nlimited \\\nlimo \\\nlincoln \\\nlinde \\\nlink \\\nlipsy \\\nlive \\\nliving \\\nlk \\\nllc \\\nllp \\\nloan \\\nloans \\\nlocker \\\nlocus \\\nloft \\\nlol \\\nlondon \\\nlotte \\\nlotto \\\nlove \\\nlpl \\\nlplfinancial \\\nlr \\\nls \\\nlt \\\nltd \\\nltda \\\nlu \\\nlundbeck \\\nluxe \\\nluxury \\\nlv \\\nly \\\nma \\\nmacys \\\nmadrid \\\nmaif \\\nmaison \\\nmakeup \\\nman \\\nmanagement \\\nmango \\\nmap \\\nmarket \\\nmarketing \\\nmarkets \\\nmarriott \\\nmarshalls \\\nmaserati \\\nmattel \\\nmba \\\nmc \\\nmckinsey \\\nmd \\\nme \\\nmed \\\nmedia \\\nmeet \\\nmelbourne \\\nmeme \\\nmemorial \\\nmen \\\nmenu \\\nmerckmsd \\\nmg \\\nmh \\\nmiami \\\nmicrosoft \\\nmil \\\nmini \\\nmint \\\nmit \\\nmitsubishi \\\nmk \\\nml \\\nmlb \\\nmls \\\nmm \\\nmma \\\nmn \\\nmo \\\nmobi \\\nmobile \\\nmoda \\\nmoe \\\nmoi \\\nmom \\\nmonash \\\nmoney \\\nmonster \\\nmormon \\\nmortgage \\\nmoscow \\\nmoto \\\nmotorcycles \\\nmov \\\nmovie \\\nmp \\\nmq \\\nmr \\\nms \\\nmsd \\\nmt \\\nmtn \\\nmtr \\\nmu \\\nmuseum \\\nmusic \\\nmutual \\\nmv \\\nmw \\\nmx \\\nmy \\\nmz \\\nna \\\nnab \\\nnagoya \\\nname \\\nnatura \\\nnavy \\\nnba \\\nnc \\\nne \\\nnec \\\nnet \\\nnetbank \\\nnetflix \\\nnetwork \\\nneustar \\\nnew \\\nnews \\\nnext \\\nnextdirect \\\nnexus \\\nnf \\\nnfl \\\nng \\\nngo \\\nnhk \\\nni \\\nnico \\\nnike \\\nnikon \\\nninja \\\nnissan \\\nnissay \\\nnl \\\nno \\\nnokia \\\nnorthwesternmutual \\\nnorton \\\nnow \\\nnowruz \\\nnowtv \\\nnp \\\nnr \\\nnra \\\nnrw \\\nntt \\\nnu \\\nnyc \\\nnz \\\nobi \\\nobserver \\\noffice \\\nokinawa \\\nolayan \\\nolayangroup \\\noldnavy \\\nollo \\\nom \\\nomega \\\none \\\nong \\\nonl \\\nonline \\\nooo \\\nopen \\\noracle \\\norange \\\norg \\\norganic \\\norigins \\\nosaka \\\notsuka \\\nott \\\novh \\\npa \\\npage \\\npanasonic \\\nparis \\\npars \\\npartners \\\nparts \\\nparty \\\npassagens \\\npay \\\npccw \\\npe \\\npet \\\npf \\\npfizer \\\npg \\\nph \\\npharmacy \\\nphd \\\nphilips \\\nphone \\\nphoto \\\nphotography \\\nphotos \\\nphysio \\\npics \\\npictet \\\npictures \\\npid \\\npin \\\nping \\\npink \\\npioneer \\\npizza \\\npk \\\npl \\\nplace \\\nplay \\\nplaystation \\\nplumbing \\\nplus \\\npm \\\npn \\\npnc \\\npohl \\\npoker \\\npolitie \\\nporn \\\npost \\\npr \\\npramerica \\\npraxi \\\npress \\\nprime \\\npro \\\nprod \\\nproductions \\\nprof \\\nprogressive \\\npromo \\\nproperties \\\nproperty \\\nprotection \\\npru \\\nprudential \\\nps \\\npt \\\npub \\\npw \\\npwc \\\npy \\\nqa \\\nqpon \\\nquebec \\\nquest \\\nracing \\\nradio \\\nre \\\nread \\\nrealestate \\\nrealtor \\\nrealty \\\nrecipes \\\nred \\\nredstone \\\nredumbrella \\\nrehab \\\nreise \\\nreisen \\\nreit \\\nreliance \\\nren \\\nrent \\\nrentals \\\nrepair \\\nreport \\\nrepublican \\\nrest \\\nrestaurant \\\nreview \\\nreviews \\\nrexroth \\\nrich \\\nrichardli \\\nricoh \\\nril \\\nrio \\\nrip \\\nro \\\nrocher \\\nrocks \\\nrodeo \\\nrogers \\\nroom \\\nrs \\\nrsvp \\\nru \\\nrugby \\\nruhr \\\nrun \\\nrw \\\nrwe \\\nryukyu \\\nsa \\\nsaarland \\\nsafe \\\nsafety \\\nsakura \\\nsale \\\nsalon \\\nsamsclub \\\nsamsung \\\nsandvik \\\nsandvikcoromant \\\nsanofi \\\nsap \\\nsarl \\\nsas \\\nsave \\\nsaxo \\\nsb \\\nsbi \\\nsbs \\\nsc \\\nsca \\\nscb \\\nschaeffler \\\nschmidt \\\nscholarships \\\nschool \\\nschule \\\nschwarz \\\nscience \\\nscot \\\nsd \\\nse \\\nsearch \\\nseat \\\nsecure \\\nsecurity \\\nseek \\\nselect \\\nsener \\\nservices \\\nses \\\nseven \\\nsew \\\nsex \\\nsexy \\\nsfr \\\nsg \\\nsh \\\nshangrila \\\nsharp \\\nshaw \\\nshell \\\nshia \\\nshiksha \\\nshoes \\\nshop \\\nshopping \\\nshouji \\\nshow \\\nshowtime \\\nsi \\\nsilk \\\nsina \\\nsingles \\\nsite \\\nsj \\\nsk \\\nski \\\nskin \\\nsky \\\nskype \\\nsl \\\nsling \\\nsm \\\nsmart \\\nsmile \\\nsn \\\nsncf \\\nso \\\nsoccer \\\nsocial \\\nsoftbank \\\nsoftware \\\nsohu \\\nsolar \\\nsolutions \\\nsong \\\nsony \\\nsoy \\\nspa \\\nspace \\\nsport \\\nspot \\\nsr \\\nsrl \\\nss \\\nst \\\nstada \\\nstaples \\\nstar \\\nstatebank \\\nstatefarm \\\nstc \\\nstcgroup \\\nstockholm \\\nstorage \\\nstore \\\nstream \\\nstudio \\\nstudy \\\nstyle \\\nsu \\\nsucks \\\nsupplies \\\nsupply \\\nsupport \\\nsurf \\\nsurgery \\\nsuzuki \\\nsv \\\nswatch \\\nswiss \\\nsx \\\nsy \\\nsydney \\\nsystems \\\nsz \\\ntab \\\ntaipei \\\ntalk \\\ntaobao \\\ntarget \\\ntatamotors \\\ntatar \\\ntattoo \\\ntax \\\ntaxi \\\ntc \\\ntci \\\ntd \\\ntdk \\\nteam \\\ntech \\\ntechnology \\\ntel \\\ntemasek \\\ntennis \\\nteva \\\ntf \\\ntg \\\nth \\\nthd \\\ntheater \\\ntheatre \\\ntiaa \\\ntickets \\\ntienda \\\ntiffany \\\ntips \\\ntires \\\ntirol \\\ntj \\\ntjmaxx \\\ntjx \\\ntk \\\ntkmaxx \\\ntl \\\ntm \\\ntmall \\\ntn \\\nto \\\ntoday \\\ntokyo \\\ntools \\\ntop \\\ntoray \\\ntoshiba \\\ntotal \\\ntours \\\ntown \\\ntoyota \\\ntoys \\\ntr \\\ntrade \\\ntrading \\\ntraining \\\ntravel \\\ntravelchannel \\\ntravelers \\\ntravelersinsurance \\\ntrust \\\ntrv \\\ntt \\\ntube \\\ntui \\\ntunes \\\ntushu \\\ntv \\\ntvs \\\ntw \\\ntz \\\nua \\\nubank \\\nubs \\\nug \\\nuk \\\nunicom \\\nuniversity \\\nuno \\\nuol \\\nups \\\nus \\\nuy \\\nuz \\\nva \\\nvacations \\\nvana \\\nvanguard \\\nvc \\\nve \\\nvegas \\\nventures \\\nverisign \\\nvermögensberater \\\nvermögensberatung \\\nversicherung \\\nvet \\\nvg \\\nvi \\\nviajes \\\nvideo \\\nvig \\\nviking \\\nvillas \\\nvin \\\nvip \\\nvirgin \\\nvisa \\\nvision \\\nviva \\\nvivo \\\nvlaanderen \\\nvn \\\nvodka \\\nvolkswagen \\\nvolvo \\\nvote \\\nvoting \\\nvoto \\\nvoyage \\\nvu \\\nvuelos \\\nwales \\\nwalmart \\\nwalter \\\nwang \\\nwanggou \\\nwatch \\\nwatches \\\nweather \\\nweatherchannel \\\nwebcam \\\nweber \\\nwebsite \\\nwed \\\nwedding \\\nweibo \\\nweir \\\nwf \\\nwhoswho \\\nwien \\\nwiki \\\nwilliamhill \\\nwin \\\nwindows \\\nwine \\\nwinners \\\nwme \\\nwolterskluwer \\\nwoodside \\\nwork \\\nworks \\\nworld \\\nwow \\\nws \\\nwtc \\\nwtf \\\nxbox \\\nxerox \\\nxfinity \\\nxihuan \\\nxin \\\nxxx \\\nxyz \\\nyachts \\\nyahoo \\\nyamaxun \\\nyandex \\\nye \\\nyodobashi \\\nyoga \\\nyokohama \\\nyou \\\nyoutube \\\nyt \\\nyun \\\nza \\\nzappos \\\nzara \\\nzero \\\nzip \\\nzm \\\nzone \\\nzuerich \\\nzw'.split(' '); // Internationalized domain names containing non-ASCII\n\nvar utlds = 'ελ \\\nευ \\\nбг \\\nбел \\\nдети \\\nею \\\nкатолик \\\nком \\\nмкд \\\nмон \\\nмосква \\\nонлайн \\\nорг \\\nрус \\\nрф \\\nсайт \\\nсрб \\\nукр \\\nқаз \\\nհայ \\\nישראל \\\nקום \\\nابوظبي \\\nاتصالات \\\nارامكو \\\nالاردن \\\nالبحرين \\\nالجزائر \\\nالسعودية \\\nالعليان \\\nالمغرب \\\nامارات \\\nایران \\\nبارت \\\nبازار \\\nبيتك \\\nبھارت \\\nتونس \\\nسودان \\\nسورية \\\nشبكة \\\nعراق \\\nعرب \\\nعمان \\\nفلسطين \\\nقطر \\\nكاثوليك \\\nكوم \\\nمصر \\\nمليسيا \\\nموريتانيا \\\nموقع \\\nهمراه \\\nپاکستان \\\nڀارت \\\nकॉम \\\nनेट \\\nभारत \\\nभारतम् \\\nभारोत \\\nसंगठन \\\nবাংলা \\\nভারত \\\nভাৰত \\\nਭਾਰਤ \\\nભારત \\\nଭାରତ \\\nஇந்தியா \\\nஇலங்கை \\\nசிங்கப்பூர் \\\nభారత్ \\\nಭಾರತ \\\nഭാരതം \\\nලංකා \\\nคอม \\\nไทย \\\nລາວ \\\nგე \\\nみんな \\\nアマゾン \\\nクラウド \\\nグーグル \\\nコム \\\nストア \\\nセール \\\nファッション \\\nポイント \\\n世界 \\\n中信 \\\n中国 \\\n中國 \\\n中文网 \\\n亚马逊 \\\n企业 \\\n佛山 \\\n信息 \\\n健康 \\\n八卦 \\\n公司 \\\n公益 \\\n台湾 \\\n台灣 \\\n商城 \\\n商店 \\\n商标 \\\n嘉里 \\\n嘉里大酒店 \\\n在线 \\\n大拿 \\\n天主教 \\\n娱乐 \\\n家電 \\\n广东 \\\n微博 \\\n慈善 \\\n我爱你 \\\n手机 \\\n招聘 \\\n政务 \\\n政府 \\\n新加坡 \\\n新闻 \\\n时尚 \\\n書籍 \\\n机构 \\\n淡马锡 \\\n游戏 \\\n澳門 \\\n点看 \\\n移动 \\\n组织机构 \\\n网址 \\\n网店 \\\n网站 \\\n网络 \\\n联通 \\\n诺基亚 \\\n谷歌 \\\n购物 \\\n通販 \\\n集团 \\\n電訊盈科 \\\n飞利浦 \\\n食品 \\\n餐厅 \\\n香格里拉 \\\n香港 \\\n닷넷 \\\n닷컴 \\\n삼성 \\\n한국'.split(' ');\n\n/**\n * @template A\n * @template B\n * @param {A} target\n * @param {B} properties\n * @return {A & B}\n */\nvar assign = function assign(target, properties) {\n  for (var key in properties) {\n    target[key] = properties[key];\n  }\n\n  return target;\n};\n\n/**\n * Finite State Machine generation utilities\n */\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n// Keys in scanner Collections instances\n\nvar numeric = 'numeric';\nvar ascii = 'ascii';\nvar alpha = 'alpha';\nvar asciinumeric = 'asciinumeric';\nvar alphanumeric = 'alphanumeric';\nvar domain = 'domain';\nvar emoji = 'emoji';\nvar scheme = 'scheme';\nvar slashscheme = 'slashscheme';\nvar whitespace = 'whitespace';\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\n\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n\n  return groups[name];\n}\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\n\n\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n\n  for (var k in flags) {\n    var group = registerGroup(k, groups);\n\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\n\nfunction flagsForToken(t, groups) {\n  var result = {};\n\n  for (var c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n\n  return result;\n}\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\n\n\nfunction State(token) {\n  if (token === void 0) {\n    token = null;\n  }\n\n  // this.n = null; // DEBUG: State name\n\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n\n  /** @type {[RegExp, State<T>][]} jr */\n\n  this.jr = [];\n  /** @type {?State<T>} jd */\n\n  this.jd = null;\n  /** @type {?T} t */\n\n  this.t = token;\n}\n/**\n * Scanner token groups\n * @type Collections<string>\n */\n\nState.groups = {};\nState.prototype = {\n  accepts: function accepts() {\n    return !!this.t;\n  },\n\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go: function go(input) {\n    var state = this;\n    var nextState = state.j[input];\n\n    if (nextState) {\n      return nextState;\n    }\n\n    for (var i = 0; i < state.jr.length; i++) {\n      var regex = state.jr[i][0];\n      var _nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n\n      if (_nextState && regex.test(input)) {\n        return _nextState;\n      }\n    } // Nowhere left to jump! Return default, if any\n\n\n    return state.jd;\n  },\n\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has: function has(input, exactOnly) {\n    if (exactOnly === void 0) {\n      exactOnly = false;\n    }\n\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta: function ta(inputs, next, flags, groups) {\n    for (var i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr: function tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    var nextState;\n\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts: function ts(input, next, flags, groups) {\n    var state = this;\n    var len = input.length;\n\n    if (!len) {\n      return state;\n    }\n\n    for (var i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt: function tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    var state = this; // Check if existing state given, just a basic transition\n\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n\n    var t = next; // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n\n    var nextState,\n        templateState = state.go(input);\n\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          var allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n\n      nextState.t = t; // overwrite anything that was previously there\n    }\n\n    state.j[input] = nextState;\n    return nextState;\n  }\n}; // Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\n\nvar ta = function ta(state, input, next, flags, groups) {\n  return state.ta(input, next, flags, groups);\n};\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\n\nvar tr = function tr(state, regexp, next, flags, groups) {\n  return state.tr(regexp, next, flags, groups);\n};\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\n\nvar ts = function ts(state, input, next, flags, groups) {\n  return state.ts(input, next, flags, groups);\n};\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\n\nvar tt = function tt(state, input, next, flags, groups) {\n  return state.tt(input, next, flags, groups);\n};\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n// A valid web domain token\nvar WORD = 'WORD'; // only contains a-z\n\nvar UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\n// Special case of word\n\nvar LOCALHOST = 'LOCALHOST'; // Valid top-level domain, special case of WORD (see tlds.js)\n\nvar TLD = 'TLD'; // Valid IDN TLD, special case of UWORD (see tlds.js)\n\nvar UTLD = 'UTLD'; // The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\n\nvar SCHEME = 'SCHEME'; // Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\n\nvar SLASH_SCHEME = 'SLASH_SCHEME'; // Any sequence of digits 0-9\n\nvar NUM = 'NUM'; // Any number of consecutive whitespace characters that are not newline\n\nvar WS = 'WS'; // New line (unix style)\n\nvar NL$1 = 'NL'; // \\n\n// Opening/closing bracket classes\n\nvar OPENBRACE = 'OPENBRACE'; // {\n\nvar OPENBRACKET = 'OPENBRACKET'; // [\n\nvar OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\n\nvar OPENPAREN = 'OPENPAREN'; // (\n\nvar CLOSEBRACE = 'CLOSEBRACE'; // }\n\nvar CLOSEBRACKET = 'CLOSEBRACKET'; // ]\n\nvar CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\n\nvar CLOSEPAREN = 'CLOSEPAREN'; // )\n// Various symbols\n\nvar AMPERSAND = 'AMPERSAND'; // &\n\nvar APOSTROPHE = 'APOSTROPHE'; // '\n\nvar ASTERISK = 'ASTERISK'; // *\n\nvar AT = 'AT'; // @\n\nvar BACKSLASH = 'BACKSLASH'; // \\\n\nvar BACKTICK = 'BACKTICK'; // `\n\nvar CARET = 'CARET'; // ^\n\nvar COLON = 'COLON'; // :\n\nvar COMMA = 'COMMA'; // ,\n\nvar DOLLAR = 'DOLLAR'; // $\n\nvar DOT = 'DOT'; // .\n\nvar EQUALS = 'EQUALS'; // =\n\nvar EXCLAMATION = 'EXCLAMATION'; // !\n\nvar HYPHEN = 'HYPHEN'; // -\n\nvar PERCENT = 'PERCENT'; // %\n\nvar PIPE = 'PIPE'; // |\n\nvar PLUS = 'PLUS'; // +\n\nvar POUND = 'POUND'; // #\n\nvar QUERY = 'QUERY'; // ?\n\nvar QUOTE = 'QUOTE'; // \"\n\nvar SEMI = 'SEMI'; // ;\n\nvar SLASH = 'SLASH'; // /\n\nvar TILDE = 'TILDE'; // ~\n\nvar UNDERSCORE = 'UNDERSCORE'; // _\n// Emoji symbol\n\nvar EMOJI$1 = 'EMOJI'; // Default token - anything that is not one of the above\n\nvar SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tWORD: WORD,\n\tUWORD: UWORD,\n\tLOCALHOST: LOCALHOST,\n\tTLD: TLD,\n\tUTLD: UTLD,\n\tSCHEME: SCHEME,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tNUM: NUM,\n\tWS: WS,\n\tNL: NL$1,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tHYPHEN: HYPHEN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tTILDE: TILDE,\n\tUNDERSCORE: UNDERSCORE,\n\tEMOJI: EMOJI$1,\n\tSYM: SYM\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nvar ASCII_LETTER = /[a-z]/;\nvar LETTER = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/; // Any Unicode character with letter data type\n\nvar EMOJI = /(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26A7\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5-\\uDED7\\uDEDD-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7C\\uDE80-\\uDE86\\uDE90-\\uDEAC\\uDEB0-\\uDEBA\\uDEC0-\\uDEC5\\uDED0-\\uDED9\\uDEE0-\\uDEE7\\uDEF0-\\uDEF6])/; // Any Unicode emoji character\n\nvar EMOJI_VARIATION$1 = /\\ufe0f/;\nvar DIGIT = /\\d/;\nvar SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tLETTER: LETTER,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tDIGIT: DIGIT,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\nvar NL = '\\n'; // New line character\n\nvar EMOJI_VARIATION = \"\\uFE0F\"; // Variation selector, follows heart and others\n\nvar EMOJI_JOINER = \"\\u200D\"; // zero-width joiner\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\n\nfunction init$2(customSchemes) {\n  var _tr, _tr2, _tr3, _tr4, _tt, _tr5;\n\n  if (customSchemes === void 0) {\n    customSchemes = [];\n  }\n\n  // Frequently used states (name argument removed during minification)\n\n  /** @type Collections<string> */\n  var groups = {}; // of tokens\n\n  State.groups = groups;\n  /** @type State<string> */\n\n  var Start = new State(); // States for special URL symbols that accept immediately after start\n\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  var Num = tr(Start, DIGIT, NUM, (_tr = {}, _tr[numeric] = true, _tr));\n  tr(Num, DIGIT, Num); // State which emits a word token\n\n  var Word = tr(Start, ASCII_LETTER, WORD, (_tr2 = {}, _tr2[ascii] = true, _tr2));\n  tr(Word, ASCII_LETTER, Word); // Same as previous, but specific to non-fsm.ascii alphabet words\n\n  var UWord = tr(Start, LETTER, UWORD, (_tr3 = {}, _tr3[alpha] = true, _tr3));\n  tr(UWord, ASCII_LETTER); // Non-accepting\n\n  tr(UWord, LETTER, UWord); // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n\n  var Ws = tr(Start, SPACE, WS, (_tr4 = {}, _tr4[whitespace] = true, _tr4));\n  tt(Start, NL, NL$1, (_tt = {}, _tt[whitespace] = true, _tt));\n  tt(Ws, NL); // non-accepting state to avoid mixing whitespaces\n\n  tr(Ws, SPACE, Ws); // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n\n  var Emoji = tr(Start, EMOJI, EMOJI$1, (_tr5 = {}, _tr5[emoji] = true, _tr5));\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji); // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  var EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tr(EmojiJoiner, EMOJI, Emoji); // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n\n  var wordjr = [[ASCII_LETTER, Word]];\n  var uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];\n\n  for (var i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n\n  for (var _i = 0; _i < utlds.length; _i++) {\n    fastts(Start, utlds[_i], UTLD, UWORD, uwordjr);\n  }\n\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups); // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups); // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n\n  customSchemes = customSchemes.sort(function (a, b) {\n    return a[0] > b[0] ? 1 : -1;\n  });\n\n  for (var _i2 = 0; _i2 < customSchemes.length; _i2++) {\n    var _ref, _ref2;\n\n    var sch = customSchemes[_i2][0];\n    var optionalSlashSlash = customSchemes[_i2][1];\n    var flags = optionalSlashSlash ? (_ref = {}, _ref[scheme] = true, _ref) : (_ref2 = {}, _ref2[slashscheme] = true, _ref2);\n\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n\n    ts(Start, sch, sch, flags);\n  } // Localhost token\n\n\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  }); // Set default transition for start state (some symbol)\n\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups: groups\n    }, tk)\n  };\n}\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\n\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  var iterable = stringToArray(str.replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase();\n  }));\n  var charCount = iterable.length; // <= len if there are emojis, etc\n\n  var tokens = []; // return value\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n\n  var cursor = 0; // Cursor through the array-representation of the string\n\n  var charCursor = 0; // Tokenize the string\n\n  while (charCursor < charCount) {\n    var state = start;\n    var nextState = null;\n    var tokenLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n    var charsSinceAccepts = -1;\n\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState; // Keep track of the latest accepting state\n\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    } // Roll back to the latest accepting state\n\n\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts; // No more jumps, just make a new token from the last accepting one\n\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n\n    });\n  }\n\n  return tokens;\n}\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\n\nfunction stringToArray(str) {\n  var result = [];\n  var len = str.length;\n  var index = 0;\n\n  while (index < len) {\n    var first = str.charCodeAt(index);\n    var second = void 0;\n    var char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n\n    result.push(char);\n    index += char.length;\n  }\n\n  return result;\n}\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\n\nfunction fastts(state, input, t, defaultt, jr) {\n  var next;\n  var len = input.length;\n\n  for (var i = 0; i < len - 1; i++) {\n    var char = input[i];\n\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n\n    state = next;\n  }\n\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\n\nvar defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\n\nfunction Options(opts, defaultRender) {\n  if (defaultRender === void 0) {\n    defaultRender = null;\n  }\n\n  var o = assign({}, defaults);\n\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  } // Ensure all ignored tags are uppercase\n\n\n  var ignoredTags = o.ignoreTags;\n  var uppercaseIgnoredTags = [];\n\n  for (var i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n\n\n  this.o = o;\n\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender: function defaultRender(ir) {\n    return ir;\n  },\n\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check: function check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get: function get(key, operator, token) {\n    var isCallable = operator != null;\n    var option = this.o[key];\n\n    if (!option) {\n      return option;\n    }\n\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n\n    return option;\n  },\n\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj: function getObj(key, operator, token) {\n    var obj = this.o[key];\n\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n\n    return obj;\n  },\n\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render: function render(token) {\n    var ir = token.render(this); // intermediate representation\n\n    var renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\n\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdefaults: defaults,\n\tOptions: Options,\n\tassign: assign\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\n\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\n\nMultiToken.prototype = {\n  isLink: false,\n\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString: function toString() {\n    return this.v;\n  },\n\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n  */\n  toHref: function toHref(scheme) {\n    return this.toString();\n  },\n\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString: function toFormattedString(options) {\n    var val = this.toString();\n    var truncate = options.get('truncate', val, this);\n    var formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref: function toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex: function startIndex() {\n    return this.tk[0].s;\n  },\n\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex: function endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject: function toObject(protocol) {\n    if (protocol === void 0) {\n      protocol = defaults.defaultProtocol;\n    }\n\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject: function toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate: function validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render: function render(options) {\n    var token = this;\n    var href = this.toFormattedHref(options);\n    var tagName = options.get('tagName', href, token);\n    var content = this.toFormattedString(options);\n    var attributes = {};\n    var className = options.get('className', href, token);\n    var target = options.get('target', href, token);\n    var rel = options.get('rel', href, token);\n    var attrs = options.getObj('attributes', href, token);\n    var eventListeners = options.getObj('events', href, token);\n    attributes.href = href;\n\n    if (className) {\n      attributes.class = className;\n    }\n\n    if (target) {\n      attributes.target = target;\n    }\n\n    if (rel) {\n      attributes.rel = rel;\n    }\n\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n\n    return {\n      tagName: tagName,\n      attributes: attributes,\n      content: content,\n      eventListeners: eventListeners\n    };\n  }\n}; // Base token\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\n\nfunction createTokenClass(type, props) {\n  var Token = /*#__PURE__*/function (_MultiToken) {\n    _inheritsLoose(Token, _MultiToken);\n\n    function Token(value, tokens) {\n      var _this;\n\n      _this = _MultiToken.call(this, value, tokens) || this;\n      _this.t = type;\n      return _this;\n    }\n\n    return Token;\n  }(MultiToken);\n\n  for (var p in props) {\n    Token.prototype[p] = props[p];\n  }\n\n  Token.t = type;\n  return Token;\n}\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\n\nvar Email = createTokenClass('email', {\n  isLink: true,\n  toHref: function toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n/**\n\tRepresents some plain text\n*/\n\nvar Text = createTokenClass('text');\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\n\nvar Nl = createTokenClass('nl');\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\n\nvar Url = createTokenClass('url', {\n  isLink: true,\n\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref: function toHref(scheme) {\n    if (scheme === void 0) {\n      scheme = defaults.defaultProtocol;\n    }\n\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : scheme + \"://\" + this.v;\n  },\n\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol: function hasProtocol() {\n    var tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tMultiToken: MultiToken,\n\tBase: MultiToken,\n\tcreateTokenClass: createTokenClass,\n\tEmail: Email,\n\tText: Text,\n\tNl: Nl,\n\tUrl: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\n\nvar makeState = function makeState(arg) {\n  return new State(arg);\n};\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\n\n\nfunction init$1(_ref) {\n  var groups = _ref.groups;\n  // Types of characters the URL can definitely end in\n  var qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]); // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n\n  var qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI]; // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n\n  var localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, NUM, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE]; // The universal starting state.\n\n  /**\n   * @type State<Token>\n   */\n\n  var Start = makeState();\n  var Localpart = tt(Start, TILDE); // Local part of the email address\n\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  var Domain = makeState(),\n      Scheme = makeState(),\n      SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  var LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  var LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  var EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n\n  ta(EmailDomain, groups.domain, EmailDomain);\n  var EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  var Email$1 = makeState(Email); // Possible email address (could have more tlds)\n\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1); // Hyphen can jump back to a domain name\n\n  var EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen); // Final possible email states\n\n  var EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n\n  /*const EmailColonPort = */\n\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n\n  var DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n\n  var DomainDot = tt(Domain, DOT); // domain followed by DOT\n\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  var DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  var DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n\n  var DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort); // Long URL with optional port and maybe query string\n\n  var Url$1 = makeState(Url); // URL with extra symbols at the end, followed by an opening bracket\n\n  var UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n  // Query strings\n\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept); // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1); // Note that domains that begin with schemes are treated slighly differently\n\n  var UriPrefix = tt(Scheme, COLON); // e.g., 'mailto:' or 'http://'\n\n  var SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n\n  var SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  tt(SlashSchemeColonSlash, SLASH, UriPrefix); // Scheme states can transition to domain states\n\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen); // Force URL with scheme prefix followed by anything sane\n\n  ta(UriPrefix, groups.domain, Url$1);\n  tt(UriPrefix, SLASH, Url$1); // URL, followed by an opening bracket\n\n  var UrlOpenbrace = tt(Url$1, OPENBRACE); // URL followed by {\n\n  var UrlOpenbracket = tt(Url$1, OPENBRACKET); // URL followed by [\n\n  var UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET); // URL followed by <\n\n  var UrlOpenparen = tt(Url$1, OPENPAREN); // URL followed by (\n\n  tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);\n  tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);\n  tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);\n  tt(UrlNonaccept, OPENPAREN, UrlOpenparen); // Closing bracket component. This character WILL be included in the URL\n\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracket, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparen, CLOSEPAREN, Url$1);\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1); // URL that beings with an opening bracket, followed by a symbols.\n  // Note that the final state can still be `UrlOpenbrace` (if the URL only\n  // has a single opening bracket for some reason).\n\n  var UrlOpenbraceQ = makeState(Url); // URL followed by { and some symbols that the URL can end it\n\n  var UrlOpenbracketQ = makeState(Url); // URL followed by [ and some symbols that the URL can end it\n\n  var UrlOpenanglebracketQ = makeState(Url); // URL followed by < and some symbols that the URL can end it\n\n  var UrlOpenparenQ = makeState(Url); // URL followed by ( and some symbols that the URL can end it\n\n  ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);\n  var UrlOpenbraceSyms = makeState(); // UrlOpenbrace followed by some symbols it cannot end it\n\n  var UrlOpenbracketSyms = makeState(); // UrlOpenbracketQ followed by some symbols it cannot end it\n\n  var UrlOpenanglebracketSyms = makeState(); // UrlOpenanglebracketQ followed by some symbols it cannot end it\n\n  var UrlOpenparenSyms = makeState(); // UrlOpenparenQ followed by some symbols it cannot end it\n\n  ta(UrlOpenbrace, qsNonAccepting);\n  ta(UrlOpenbracket, qsNonAccepting);\n  ta(UrlOpenanglebracket, qsNonAccepting);\n  ta(UrlOpenparen, qsNonAccepting); // URL that begins with an opening bracket, followed by some symbols\n\n  ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);\n  ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);\n  ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms); // Close brace/bracket to become regular URL\n\n  tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenQ, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n\n  tt(Start, NL$1, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\n\nfunction run(start, input, tokens) {\n  var len = tokens.length;\n  var cursor = 0;\n  var multis = [];\n  var textTokens = [];\n\n  while (cursor < len) {\n    var state = start;\n    var secondState = null;\n    var nextState = null;\n    var multiLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState; // Keep track of the latest accepting state\n\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n\n      cursor++;\n      multiLength++;\n    }\n\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      } // Roll back to the latest accepting state\n\n\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts; // Create a new multitoken\n\n      var Multi = latestAccepting.t;\n      var subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  } // Finally close off the textTokens (if available)\n\n\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n\n  return multis;\n}\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\n\nfunction initMultiToken(Multi, input, tokens) {\n  var startIdx = tokens[0].s;\n  var endIdx = tokens[tokens.length - 1].e;\n  var value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nvar warn = typeof console !== 'undefined' && console && console.warn || function () {};\n\nvar warnAdvice = 'To avoid this warning, please register all custom schemes before invoking linkify the first time.'; // Side-effect initialization state\n\nvar INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\n\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n}\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\n\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(\"linkifyjs: Invalid token plugin \" + plugin + \" (expects function)\");\n  }\n\n  for (var i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(\"linkifyjs: token plugin \\\"\" + name + \"\\\" already registered - will be overwritten\");\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n\n  INIT.tokenQueue.push([name, plugin]);\n\n  if (INIT.initialized) {\n    warn(\"linkifyjs: already initialized - will not register token plugin \\\"\" + name + \"\\\" until you manually call linkify.init(). \" + warnAdvice);\n  }\n}\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\n\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(\"linkifyjs: Invalid plugin \" + plugin + \" (expects function)\");\n  }\n\n  for (var i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(\"linkifyjs: plugin \\\"\" + name + \"\\\" already registered - will be overwritten\");\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n\n  INIT.pluginQueue.push([name, plugin]);\n\n  if (INIT.initialized) {\n    warn(\"linkifyjs: already initialized - will not register plugin \\\"\" + name + \"\\\" until you manually call linkify.init(). \" + warnAdvice);\n  }\n}\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} protocol\n * @param {boolean} [optionalSlashSlash]\n */\n\nfunction registerCustomProtocol(scheme, optionalSlashSlash) {\n  if (optionalSlashSlash === void 0) {\n    optionalSlashSlash = false;\n  }\n\n  if (INIT.initialized) {\n    warn(\"linkifyjs: already initialized - will not register custom scheme \\\"\" + scheme + \"\\\" until you manually call linkify.init(). \" + warnAdvice);\n  }\n\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error('linkifyjs: incorrect scheme format.\\n 1. Must only contain digits, lowercase ASCII letters or \"-\"\\n 2. Cannot start or end with \"-\"\\n 3. \"-\" cannot repeat');\n  }\n\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\n\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n\n  for (var i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  } // Initialize parser state machine and plugins\n\n\n  INIT.parser = init$1(INIT.scanner.tokens);\n\n  for (var _i = 0; _i < INIT.pluginQueue.length; _i++) {\n    INIT.pluginQueue[_i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n\n  INIT.initialized = true;\n}\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\n\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n*/\n\nfunction find(str, type, opts) {\n  if (type === void 0) {\n    type = null;\n  }\n\n  if (opts === void 0) {\n    opts = null;\n  }\n\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(\"linkifyjs: Invalid link type \" + type + \"; must be a string\");\n    }\n\n    opts = type;\n    type = null;\n  }\n\n  var options = new Options(opts);\n  var tokens = tokenize(str);\n  var filtered = [];\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.isLink && (!type || token.t === type)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n\n  return filtered;\n}\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\n\nfunction test(str, type) {\n  if (type === void 0) {\n    type = null;\n  }\n\n  var tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, tokenize };\n","import { createTokenClass, State, registerPlugin } from 'linkifyjs';\n\nvar HashtagToken = createTokenClass('hashtag', {\n  isLink: true\n});\n/**\n * @type {import('linkifyjs').Plugin}\n */\n\nfunction hashtag(_ref) {\n  var scanner = _ref.scanner,\n      parser = _ref.parser;\n  // Various tokens that may compose a hashtag\n  var _scanner$tokens = scanner.tokens,\n      POUND = _scanner$tokens.POUND,\n      UNDERSCORE = _scanner$tokens.UNDERSCORE;\n  var _scanner$tokens$group = scanner.tokens.groups,\n      alpha = _scanner$tokens$group.alpha,\n      numeric = _scanner$tokens$group.numeric,\n      alphanumeric = _scanner$tokens$group.alphanumeric; // Take or create a transition from start to the '#' sign (non-accepting)\n  // Take transition from '#' to any text token to yield valid hashtag state\n  // Account for leading underscore (non-accepting unless followed by alpha)\n\n  var Hash = parser.start.tt(POUND);\n  var HashPrefix = Hash.tt(UNDERSCORE);\n  var Hashtag = new State(HashtagToken);\n  Hash.ta(numeric, HashPrefix);\n  Hash.ta(alpha, Hashtag);\n  HashPrefix.ta(alpha, Hashtag);\n  HashPrefix.ta(numeric, HashPrefix);\n  HashPrefix.tt(UNDERSCORE, HashPrefix);\n  Hashtag.ta(alphanumeric, Hashtag);\n  Hashtag.tt(UNDERSCORE, Hashtag); // Trailing underscore is okay\n}\n\nregisterPlugin('hashtag', hashtag);\n","import BaseCard from 'components/common/BaseCard'\nimport GlobeIcon from 'components/Icon/GlobeIcon'\nimport PeopleIcon from 'components/Icon/PeopleIcon'\nimport PhotoIcon from 'components/Icon/PhotoIcon'\nimport { defaultAvatar } from 'config'\nimport { useState } from 'react'\nimport type { MouseEventHandler } from 'react'\nimport { TweetText } from 'services/TweetText'\nimport { useAppContext } from 'state/AppContext'\nimport { useCreateNewTweetMutation } from 'hooks/fetchQueries'\nimport ProgressRing from './ProgressRing'\nimport * as linkify from 'linkifyjs'\nimport 'linkify-plugin-hashtag'\n\nconst options = {\n  formatHref: {\n    hashtag: (href: string) => 'https://twitter.com/hashtag/' + href.substr(1)\n  }\n}\n\nexport default function TweetCompose() {\n  const {\n    state: { user },\n    dispatch\n  } = useAppContext()\n\n  const createTweetMutation = useCreateNewTweetMutation()\n\n  const [tweetText, setTweetText] = useState('')\n  const [tweetImage, setTweetImage] = useState('')\n  const [commentAllowed, setCommentAllowed] = useState('everyone')\n\n  const submitTweet: MouseEventHandler = () => {\n    if (!tweetText) return\n    const textInstance = new TweetText(tweetText)\n    createTweetMutation.mutate(\n      {\n        text: tweetText.trim(),\n        image: tweetImage,\n        commentAllowed,\n        hashtags: textInstance.hashtags\n      },\n      {\n        onSettled: () => {\n          setTweetText('')\n          setTweetImage('')\n        },\n        onError: () => {\n          dispatch({ type: 'setAlert', payload: 'Creating Tweet Failed' })\n        }\n      }\n    )\n    // createNewTweet(tweetText.trim(), tweetImage, commentAllowed, textInstance.hashtags)\n    //   .then(\n    //     (t) => console.log(t),\n    //     (e) => console.log(e)\n    //   )\n    //   .finally(() => {\n    //     setTweetText('')\n    //     setTweetImage('')\n    //   })\n  }\n\n  const changeCommentAllowed = (allowMode: string) => () => {\n    setCommentAllowed(allowMode)\n  }\n\n  const whoCanReplyMessage = `${\n    commentAllowed === 'followed' ? 'People you follow' : 'Everyone'\n  } can reply`\n\n  const tweetComposeActions = (\n    <div className=\"flex justify-between\">\n      <div className=\"flex items-center cursor-pointer icons\">\n        <span className=\"text-accent-focus\">\n          <PhotoIcon />\n        </span>\n        <div className=\"dropdown dropdown-hover\">\n          <div className=\"flex items-center text-accent-focus\" tabIndex={0}>\n            <GlobeIcon />\n            <span>{whoCanReplyMessage}</span>\n          </div>\n          <div\n            tabIndex={0}\n            className=\"p-4 w-max shadow bg-base-100 dropdown-content menu rounded-box\"\n          >\n            <div>\n              <h5 className=\"font-semibold\">Who can reply?</h5>\n              <span className=\"text-sm text-gray-500\">Choose who can reply to this tweet.</span>\n            </div>\n            <ul>\n              <li\n                className=\"flex flex-row items-center p-2 text-sm hover:bg-gray-100\"\n                onClick={changeCommentAllowed('everyone')}\n              >\n                <div className=\"p-1\">\n                  <GlobeIcon />\n                </div>\n                Everyone\n              </li>\n              <li\n                className=\"flex flex-row items-center p-2 text-sm hover:bg-gray-100\"\n                onClick={changeCommentAllowed('followed')}\n              >\n                <div className=\"p-1\">\n                  <PeopleIcon />\n                </div>\n                People you follow\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex gap-2 items-center\">\n        <ProgressRing letterCount={tweetText.length} />\n        <button className=\"btn btn-primary\" disabled={tweetText.length > 300} onClick={submitTweet}>\n          Tweet\n        </button>\n      </div>\n    </div>\n  )\n\n  return (\n    <BaseCard title=\"Tweet Something\" actions={tweetComposeActions}>\n      <div className=\"flex items-start my-2\">\n        <img\n          src={user.avatar || defaultAvatar}\n          width=\"50\"\n          height=\"50\"\n          className=\"mask mask-squircle\"\n        />\n        <textarea\n          className=\"mx-2 w-full textarea text-base-content\"\n          placeholder=\"What's Happening\"\n          value={tweetText}\n          onChange={(e) => {\n            setTweetText(e.target.value)\n          }}\n        ></textarea>\n      </div>\n    </BaseCard>\n  )\n}\n","import BaseCard from 'components/common/BaseCard'\nimport Paginate from 'components/common/Paginate'\nimport Trends from 'components/trends/Trends'\nimport Timeline from 'components/tweet/Timeline'\nimport TweetCompose from 'components/tweet/TweetCompose'\nimport { defaultAvatar } from 'config'\nimport { useQueryFeed, useQueryRecommendedUsers } from 'hooks/fetchQueries'\nimport { useState } from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Link, useLocation } from 'react-router-dom'\nimport { followProfileOf } from 'services/fetch'\n\nfunction HomePage() {\n  // TODO: next page button in the end or infinite scroll\n  const [page, setPage] = useState(1)\n  const location = useLocation()\n  console.log(location)\n\n  const { data: feedData, isLoading, isPreviousData, isFetching } = useQueryFeed(page)\n\n  const { data: recommendedUsersData } = useQueryRecommendedUsers()\n\n  const queryClient = useQueryClient()\n  const followMutation = useMutation(followProfileOf)\n\n  const clickFollow = (handle: string) => {\n    followMutation.mutate(handle, {\n      onSuccess: () => queryClient.invalidateQueries('recommendedUsers')\n    })\n  }\n\n  return (\n    <div className=\"home flex flex-col gap-8 lg:flex-row\">\n      <div className=\"mx-auto w-full sm:w-5/6 lg:w-2/3\">\n        <TweetCompose></TweetCompose>\n        <Paginate isPreviousData={isPreviousData} page={page} setPage={setPage}>\n          <Timeline loading={isLoading || isFetching} tweets={feedData?.feed} />\n        </Paginate>\n      </div>\n      <div className=\"mx-auto w-full sm:w-5/6 lg:w-1/3\">\n        <Trends />\n        <BaseCard title=\"Who to Follow\">\n          {recommendedUsersData?.recommendations.map((listMember) => (\n            <div key={listMember.id}>\n              <div className=\"flex items-start\">\n                <div className=\"follow-list-user\">\n                  <div className=\"follow-list-info flex\">\n                    <div className=\"avatar follow-list-avatar h-12 w-12 p-2\">\n                      <img\n                        className=\"mask mask-squircle\"\n                        src={listMember.avatar || defaultAvatar}\n                        alt={listMember.name}\n                      />\n                    </div>\n                    <div>\n                      <Link to={`/profile/${listMember.handle}`}>\n                        <h2 className=\"custom-title follow-list-name font-medium\">\n                          {listMember.name}\n                        </h2>\n                      </Link>\n                      <div className=\"text-base-content/70 follow-list-count text-sm\">\n                        {listMember.followerCount} {` followers`}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-base-content/70 follow-list-bio p-2 text-sm\">\n                    {listMember.bio}\n                  </div>\n                </div>\n                <div className=\"follow-list-button ml-auto\">\n                  <button\n                    className=\"btn btn-sm btn-primary\"\n                    onClick={() => {\n                      clickFollow(listMember.handle)\n                    }}\n                  >\n                    Follow\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </BaseCard>\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage\n"],"names":["GlobeIcon","props","Icon","PeopleIcon","hashtagRegex","mentionRegex","urlRegex","TweetText","text","__publicField","regex","matches","match","ProgressRing","letterCount","value","Math","floor","textColorClassname","_jsxs","_jsx","assign","target","properties","key","numeric","ascii","alpha","asciinumeric","alphanumeric","domain","emoji","registerGroup","name","groups","addToGroups","t","flags","k","group","flagsForToken","result","c","State","token","input","state","nextState","i","_nextState","exactOnly","inputs","next","regexp","len","templateState","allFlags","LOCALHOST","COLON","_inheritsLoose","subClass","superClass","_setPrototypeOf","o","p","defaults","noop","Options","opts","defaultRender","ignoredTags","uppercaseIgnoredTags","ir","operator","isCallable","option","obj","renderFn","val","MultiToken","tokens","scheme","options","truncate","formatted","protocol","href","tagName","content","attributes","className","rel","attrs","eventListeners","createTokenClass","type","Token","_MultiToken","_this","warn","INIT","registerPlugin","plugin","HashtagToken","hashtag","_ref","scanner","parser","_scanner$tokens","POUND","UNDERSCORE","_scanner$tokens$group","Hash","HashPrefix","Hashtag","TweetCompose","user","dispatch","useAppContext","createTweetMutation","useCreateNewTweetMutation","tweetText","setTweetText","useState","tweetImage","setTweetImage","commentAllowed","setCommentAllowed","submitTweet","textInstance","mutate","trim","image","hashtags","onSettled","onError","payload","changeCommentAllowed","allowMode","tweetComposeActions","PhotoIcon","whoCanReplyMessage","length","BaseCard","avatar","defaultAvatar","e","HomePage","page","setPage","location","useLocation","console","log","data","feedData","isLoading","isPreviousData","isFetching","useQueryFeed","recommendedUsersData","useQueryRecommendedUsers","queryClient","useQueryClient","followMutation","useMutation","followProfileOf","clickFollow","handle","onSuccess","invalidateQueries","Paginate","Timeline","feed","Trends","recommendations","map","listMember","Link","followerCount","bio","id"],"mappings":"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"}